00: 	NOP (No Operation)
	Does nothing.

01:	LIA (Load Immediate A) [2 byte operand]
	Loads the operand into the accumulator.

02:	IAB (Load Immediate A Big) [1 byte operand]
	Loads the operand into the big end of the accumulator.

03:	IAL (Load Immediate A Little) [1 byte operand]
	Loads the operand into the little end of the accumulator.

04: 	LDA (Load A) [2 byte pointer]
	Loads the value at the provided address into the accumulator.

05: 	LAB (Load A Big) [1 byte pointer]
	Loads the value at the provided address into the big end of the accumulator

06: 	LAL (Load A Little) [1 byte pointer]
	Loads the value at the provided address into the little end of the accumulator.

07: 	STA (Store A) [2 byte pointer]
	Stores accumulator value at the provided address.

08: 	SAB (Store A Big) [2 byte pointer]
	Stores big end of accumulator value at the provided address.

09: 	SAL (Store A Little) [2 byte pointer]
	Stores little end of accumulator valueat the provided address.

0a: 	SUB (Subtract) [2 byte pointer]
	Subtracts value at the provided address from the accumulator value.

0b: 	ADD (Add) [2 byte pointer]
	Adds value at the provided address to the accumulator value.

0c: 	XOR (Bitwise XOR) [2 byte pointer]
	Runs XOR operation on the value at the provided address and the accumulator value.

0d: 	ORA (Bitwise OR) [2 byte pointer]
	Runs OR operation on the value at the provided address and the accumulator value.

0e: 	AND (Bitwise AND) [2 byte pointer]
	Runs AND operation on the value at the provided address and the accumulator value.

0f: 	NOT (Bitwise NOT)
	Runs NOT operation on the accumulator value.

10: 	ASR (Arithmetic Shift Right) [1 nibble operand]
	Shifts signed accumulator value right by provided amount of bits.

11: 	LSR (Logical Shift Right) [1 nibble operand]
	Shifts unsigned accumulator value right by provided amount of bits.

12: 	LSL (Logical Shift Left) [1 nibble operand]
	Shifts unsigned accumulator value left by provided amount of bits.

13: 	JMP (Jump) [2 byte address]
	Jumps to the provided address.

14: 	BEQ (Branch if Equal) [2 byte address]
	Jumps to the provided address if the zero flag is set.

15: 	BCS (Branch if Carry Set) [2 byte address]
	Jumps to the provided address if the carry flag is set.

16: 	BVS (Branch if Vsync) [2 byte address]
	Jumps to the provided address if the greyscale GPU is not rendering.

17: 	TAX (Transfer A to X)
	Transfers the accumulator value to the index register.

18: 	TXA (Transfer A to X)
	Transfers the index register value to the accumulator.





1b: 	HDI (Hex Display In)
	Transfers the accumulator value to the hex display.

1c: 	HBI (Hex Display Big In)
	Transfers the big end of the accumulator value to the hex display.

1d: 	HLI (Hex Display Little In)
	Transfers the little end of the accumulator value to the hex display.

1e: 	HPI (Hex Display Points In)
	Transfers the little nibble of the accumulator value to the decimal points of the hex display.

1f: 	INX (Increment X)
	Increments the index register.

20: 	JSR (Jump Subroutine) [2 byte address]
	Jumps to the provided address and stores the return address on the stack.

21: 	RTS (Return from Subroutine)
	Jumps to the highest return address on the stack.

22: 	PHA (Push A)
	Pushes the accumulator value onto the stack.

23: 	PLA (Pull A)
	Pulls the accumulator value from the stack.

24: 	PHX (Push X)
	Pushes the index register value to the stack.

25: 	PLX (Pull X)
	Pulls the index register value from the stack.

26: 	SEI (Set Inhibit)
	Sets the interrupt inhibit flag.

27: 	CLI (Clear Inhibit)
	Clears the interrupt inhibit flag.

28: 	GCR (Greyscale Counter Reset)
	Resets the address counter for the greyscale framebuffer. 

29: 	GWB (Greyscale Write Byte) [2 byte pointer]
	Writes the byte at the provided address to the greyscale framebuffer at the current value of the address counter.

2a: 	GWI (Greyscale Write Integer) [2 byte pointer]
	Writes the 16-bit integer at the provided address to the greyscale framebuffer at the current value of the address counter.

2b: 	GRF (Greyscale Render Frame)
	Starts the rendering process of the greyscale display.





2d: 	CCI (Colour Coordinate In)
	Sets the coordinate of the colour display to the accumulator value.

2e: 	CCX (Colour Coordinate X In)
	Sets the X coordinate of the colour display to the little end of the accumulator value.

2f: 	CCY (Colour Coordinate Y In)
	Sets the Y coordinate of the colour display to the little end of the accumulator value.

30: 	CCW (Colour Coordinate Write)
	Sets the pixel at the current coordinate to the colour stored in the accumulator.

31: 	CLC (Clear Colour)
	Clears the Colour Display.

32: 	TDW (Text Display Write)
	Writes the accumulator character to the text display.

33: 	CTD (Clear Text Display)
	Clears the text display.





fe: 	RTI (Return from Interrupt)
	Pulls the register values and the return address from the top of the stack and jumps back to the main code.

ff: 	HLT (Halt)
	Stops the clock.